name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_INCREMENTAL: 0
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUSTFLAGS: "-D warnings"

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Check formatting
      run: cargo fmt -- --check

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Z3
      run: sudo apt-get install libz3-dev
    - name: Build
      run: cargo build -vv --all
      # XXX: Ubuntu's Z3 package seems to be missing some symbols, like
      # `Z3_mk_pbeq`, leading to linker errors. Just ignore this, I guess, until
      # we figure out how to work around it. At least we have the
      # statically-linked Z3 tests below...
      if: ${{ success() || failure() }}
    - name: Run tests
      run: cargo test -vv --all
      # See above.
      if: ${{ success() || failure() }}
    - name: Run tests with `arbitrary-size-numeral` enabled
      run: cargo test --manifest-path z3/Cargo.toml -vv --features arbitrary-size-numeral
      # See above.
      if: ${{ success() || failure() }}

  build_on_wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Install emscripten
      run: |
        cd ~
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        git pull
        ./emsdk install latest
        ./emsdk activate latest
        source ./emsdk_env.sh
    - name: Install wasm32-unknown-emscripten target
      run: rustup target add wasm32-unknown-emscripten
    - name: Build z3-sys and z3 with statically linked Z3
      run: |
        source ~/emsdk/emsdk_env.sh
        cargo build --target=wasm32-unknown-emscripten -vv --features static-link-z3

  build_z3_statically:
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
          - build: macos
            os: macos-latest
          - build: windows
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@v1
        if: matrix.os == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'
      - name: Build `z3-sys` and `z3` with statically linked Z3
        run: cargo build -vv --features static-link-z3
      - name: Test `z3-sys` and `z3` with statically linked Z3
        run: cargo test -vv --features static-link-z3
      - name: Test `z3` with statically linked Z3 and `arbitrary-size-numeral` enabled
        run: cargo test --manifest-path z3/Cargo.toml -vv --features 'static-link-z3 arbitrary-size-numeral'

  run_clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Run clippy
      run: cargo clippy -vv --features static-link-z3 --all-targets